// this file is automatically generated by ImVue tools

#ifndef __IMVUE_CONFIG_H__
#define __IMVUE_CONFIG_H__

#include "imgui.h"
#include "imvue.h"
#include "imvue_element.h"
#include "imvue_errors.h"

namespace ImVue {

  class SliderAngle : public Element {

    public:
      SliderAngle()
        : label(NULL),v_rad(NULL),v_degrees_min(-360.0f),v_degrees_max(+360.0f),format(ImStrdup("%.0f deg"))
      {
      }
      virtual ~SliderAngle() {
        if(label != NULL) ImGui::MemFree(label);
        if(v_rad != NULL) ImGui::MemFree(v_rad);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::SliderAngle(label, v_rad, v_degrees_min, v_degrees_max, format);
      }
      char* label;
      float* v_rad;
      float v_degrees_min;
      float v_degrees_max;
      char* format;
  };

  class Group : public ContainerElement {

    public:
      Group()
      {
      }

      void renderBody() {
        ImGui::BeginGroup();
        ContainerElement::renderBody();
        ImGui::EndGroup();
      }
  };

  class InputInt3 : public Element {

    public:
      InputInt3()
        : label(NULL),v{0},flags(0)
      {
      }
      virtual ~InputInt3() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::InputInt3(label, v, flags);
      }
      char* label;
      int v[3];
      ImGuiInputTextFlags flags;
  };

  class InputDouble : public Element {

    public:
      InputDouble()
        : label(NULL),v(NULL),step(0.0),step_fast(0.0),format(ImStrdup("%.6f")),flags(0)
      {
      }
      virtual ~InputDouble() {
        if(label != NULL) ImGui::MemFree(label);
        if(v != NULL) ImGui::MemFree(v);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::InputDouble(label, v, step, step_fast, format, flags);
      }
      char* label;
      double* v;
      double step;
      double step_fast;
      char* format;
      ImGuiInputTextFlags flags;
  };

  class Menu : public ContainerElement {

    public:
      Menu()
        : label(NULL),enabled(true)
      {
      }
      virtual ~Menu() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        if(ImGui::BeginMenu(label, enabled)) {
          ContainerElement::renderBody();
          ImGui::EndMenu();
        }
      }
      char* label;
      bool enabled;
  };

  class MainMenuBar : public ContainerElement {

    public:
      MainMenuBar()
      {
      }

      void renderBody() {
        if(ImGui::BeginMainMenuBar()) {
          ContainerElement::renderBody();
          ImGui::EndMainMenuBar();
        }
      }
  };

  class NewLine : public Element {

    public:
      NewLine()
      {
      }

      void renderBody() {
        ImGui::NewLine();
      }
  };

  class Tooltip : public ContainerElement {

    public:
      Tooltip()
      {
      }

      void renderBody() {
        ImGui::BeginTooltip();
        ContainerElement::renderBody();
        ImGui::EndTooltip();
      }
  };

  class DragInt3 : public Element {

    public:
      DragInt3()
        : label(NULL),v{0},v_speed(1.0f),v_min(0),v_max(0),format(ImStrdup("%d"))
      {
      }
      virtual ~DragInt3() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::DragInt3(label, v, v_speed, v_min, v_max, format);
      }
      char* label;
      int v[3];
      float v_speed;
      int v_min;
      int v_max;
      char* format;
  };

  class DragInt2 : public Element {

    public:
      DragInt2()
        : label(NULL),v{0},v_speed(1.0f),v_min(0),v_max(0),format(ImStrdup("%d"))
      {
      }
      virtual ~DragInt2() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::DragInt2(label, v, v_speed, v_min, v_max, format);
      }
      char* label;
      int v[2];
      float v_speed;
      int v_min;
      int v_max;
      char* format;
  };

  class Window : public ContainerElement {

    public:
      Window()
        : name(NULL),p_open(true),flags(0)
      {
      }
      virtual ~Window() {
        if(name != NULL) ImGui::MemFree(name);
      }

      void renderBody() {
        ImGui::Begin(name, &p_open, flags);
        ContainerElement::renderBody();
        ImGui::End();
      }
      char* name;
      bool p_open;
      ImGuiWindowFlags flags;
  };

  class SliderInt : public Element {

    public:
      SliderInt()
        : label(NULL),v(0),v_min(0),v_max(0),format(ImStrdup("%d"))
      {
      }
      virtual ~SliderInt() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::SliderInt(label, &v, v_min, v_max, format);
      }
      char* label;
      int v;
      int v_min;
      int v_max;
      char* format;
  };

  class DragInt4 : public Element {

    public:
      DragInt4()
        : label(NULL),v{0},v_speed(1.0f),v_min(0),v_max(0),format(ImStrdup("%d"))
      {
      }
      virtual ~DragInt4() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::DragInt4(label, v, v_speed, v_min, v_max, format);
      }
      char* label;
      int v[4];
      float v_speed;
      int v_min;
      int v_max;
      char* format;
  };

  class InputFloat3 : public Element {

    public:
      InputFloat3()
        : label(NULL),v{0.0f},format(ImStrdup("%.3f")),flags(0)
      {
      }
      virtual ~InputFloat3() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::InputFloat3(label, v, format, flags);
      }
      char* label;
      float v[3];
      char* format;
      ImGuiInputTextFlags flags;
  };

  class InvisibleButton : public Element {

    public:
      InvisibleButton()
        : str_id(NULL)
      {
      }
      virtual ~InvisibleButton() {
        if(str_id != NULL) ImGui::MemFree(str_id);
      }

      void renderBody() {
        ImGui::InvisibleButton(str_id, size);
      }
      char* str_id;
      ImVec2 size;
  };

  class Combo : public ContainerElement {

    public:
      Combo()
        : label(NULL),preview_value(NULL),flags(0)
      {
      }
      virtual ~Combo() {
        if(label != NULL) ImGui::MemFree(label);
        if(preview_value != NULL) ImGui::MemFree(preview_value);
      }

      void renderBody() {
        if(ImGui::BeginCombo(label, preview_value, flags)) {
          ContainerElement::renderBody();
          ImGui::EndCombo();
        }
      }
      char* label;
      char* preview_value;
      ImGuiComboFlags flags;
  };

  class MenuItem : public Element {

    public:
      MenuItem()
        : label(NULL),shortcut(NULL),selected(false),enabled(true)
      {
      }
      virtual ~MenuItem() {
        if(label != NULL) ImGui::MemFree(label);
        if(shortcut != NULL) ImGui::MemFree(shortcut);
      }

      void renderBody() {
        ImGui::MenuItem(label, shortcut, selected, enabled);
      }
      char* label;
      char* shortcut;
      bool selected;
      bool enabled;
  };

  class SliderFloat3 : public Element {

    public:
      SliderFloat3()
        : label(NULL),v{0.0f},v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),power(1.0f)
      {
      }
      virtual ~SliderFloat3() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::SliderFloat3(label, v, v_min, v_max, format, power);
      }
      char* label;
      float v[3];
      float v_min;
      float v_max;
      char* format;
      float power;
  };

  class SliderFloat2 : public Element {

    public:
      SliderFloat2()
        : label(NULL),v{0.0f},v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),power(1.0f)
      {
      }
      virtual ~SliderFloat2() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::SliderFloat2(label, v, v_min, v_max, format, power);
      }
      char* label;
      float v[2];
      float v_min;
      float v_max;
      char* format;
      float power;
  };

  class SliderFloat4 : public Element {

    public:
      SliderFloat4()
        : label(NULL),v{0.0f},v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),power(1.0f)
      {
      }
      virtual ~SliderFloat4() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::SliderFloat4(label, v, v_min, v_max, format, power);
      }
      char* label;
      float v[4];
      float v_min;
      float v_max;
      char* format;
      float power;
  };

  class ComboItem : public Element {

    public:
      ComboItem()
        : label(NULL),current_item(0),items(NULL),items_count(0),popup_max_height_in_items(-1)
      {
      }
      virtual ~ComboItem() {
        if(label != NULL) ImGui::MemFree(label);
        if(items != NULL) ImGui::MemFree(items);
      }

      void renderBody() {
        ImGui::Combo(label, &current_item, &items, items_count, popup_max_height_in_items);
      }
      char* label;
      int current_item;
      char* items;
      int items_count;
      int popup_max_height_in_items;
  };

  class MenuBar : public ContainerElement {

    public:
      MenuBar()
      {
      }

      void renderBody() {
        if(ImGui::BeginMenuBar()) {
          ContainerElement::renderBody();
          ImGui::EndMenuBar();
        }
      }
  };

  class AlignTextToFramePadding : public Element {

    public:
      AlignTextToFramePadding()
      {
      }

      void renderBody() {
        ImGui::AlignTextToFramePadding();
      }
  };

  class Popup : public ContainerElement {

    public:
      Popup()
        : str_id(NULL),flags(0)
      {
      }
      virtual ~Popup() {
        if(str_id != NULL) ImGui::MemFree(str_id);
      }

      void renderBody() {
        if(ImGui::BeginPopup(str_id, flags)) {
          ContainerElement::renderBody();
          ImGui::EndPopup();
        }
      }
      char* str_id;
      ImGuiWindowFlags flags;
  };

  class PopupContextWindow : public ContainerElement {

    public:
      PopupContextWindow()
        : str_id(NULL),mouse_button(1),also_over_items(true)
      {
      }
      virtual ~PopupContextWindow() {
        if(str_id != NULL) ImGui::MemFree(str_id);
      }

      void renderBody() {
        if(ImGui::BeginPopupContextWindow(str_id, mouse_button, also_over_items)) {
          ContainerElement::renderBody();
          ImGui::EndPopup();
        }
      }
      char* str_id;
      int mouse_button;
      bool also_over_items;
  };

  class DragFloatRange2 : public Element {

    public:
      DragFloatRange2()
        : label(NULL),v_current_min(NULL),v_current_max(NULL),v_speed(1.0f),v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),format_max(NULL),power(1.0f)
      {
      }
      virtual ~DragFloatRange2() {
        if(label != NULL) ImGui::MemFree(label);
        if(v_current_min != NULL) ImGui::MemFree(v_current_min);
        if(v_current_max != NULL) ImGui::MemFree(v_current_max);
        if(format != NULL) ImGui::MemFree(format);
        if(format_max != NULL) ImGui::MemFree(format_max);
      }

      void renderBody() {
        ImGui::DragFloatRange2(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, power);
      }
      char* label;
      float* v_current_min;
      float* v_current_max;
      float v_speed;
      float v_min;
      float v_max;
      char* format;
      char* format_max;
      float power;
  };

  class ChildFrame : public ContainerElement {

    public:
      ChildFrame()
        : id(0),flags(0)
      {
      }

      void renderBody() {
        if(ImGui::BeginChildFrame(id, size, flags)) {
          ContainerElement::renderBody();
          ImGui::EndChildFrame();
        }
      }
      ImGuiID id;
      ImVec2 size;
      ImGuiWindowFlags flags;
  };

  class PlotLines : public Element {

    public:
      PlotLines()
        : label(NULL),values(NULL),values_count(0),values_offset(0),overlay_text(NULL),scale_min(FLT_MAX),scale_max(FLT_MAX),graph_size(ImVec2(0, 0)),stride(sizeof(float))
      {
      }
      virtual ~PlotLines() {
        if(label != NULL) ImGui::MemFree(label);
        if(values != NULL) ImGui::MemFree(values);
        if(overlay_text != NULL) ImGui::MemFree(overlay_text);
      }

      void renderBody() {
        ImGui::PlotLines(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
      }
      char* label;
      float* values;
      int values_count;
      int values_offset;
      char* overlay_text;
      float scale_min;
      float scale_max;
      ImVec2 graph_size;
      int stride;
  };

  class Spacing : public Element {

    public:
      Spacing()
      {
      }

      void renderBody() {
        ImGui::Spacing();
      }
  };

  class InputTextMultiline : public Element {

    public:
      InputTextMultiline()
        : label(NULL),buf(NULL),buf_size(512),size(ImVec2(0,0)),flags(0),callback(NULL),user_data(NULL)
      {
        buf = (char*)ImGui::MemAlloc(buf_size);
        buf[0] = '\0';
      }
      virtual ~InputTextMultiline() {
        if(label != NULL) ImGui::MemFree(label);
        if(buf != NULL) ImGui::MemFree(buf);
      }

      void renderBody() {
        ImGui::InputTextMultiline(label, buf, buf_size, size, flags, callback, user_data);
      }
      char* label;
      char* buf;
      size_t buf_size;
      ImVec2 size;
      ImGuiInputTextFlags flags;
      ImGuiInputTextCallback callback;
      void* user_data;
  };

  class Selectable : public Element {

    public:
      Selectable()
        : label(NULL),selected(false),flags(0),size(ImVec2(0,0))
      {
      }
      virtual ~Selectable() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::Selectable(label, selected, flags, size);
      }
      char* label;
      bool selected;
      ImGuiSelectableFlags flags;
      ImVec2 size;
  };

  class DragDropTarget : public ContainerElement {

    public:
      DragDropTarget()
      {
      }

      void renderBody() {
        if(ImGui::BeginDragDropTarget()) {
          ContainerElement::renderBody();
          ImGui::EndDragDropTarget();
        }
      }
  };

  class ColorEdit3 : public Element {

    public:
      ColorEdit3()
        : label(NULL),col{0.0f},flags(0)
      {
      }
      virtual ~ColorEdit3() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::ColorEdit3(label, col, flags);
      }
      char* label;
      float col[3];
      ImGuiColorEditFlags flags;
  };

  class NextColumn : public Element {

    public:
      NextColumn()
      {
      }

      void renderBody() {
        ImGui::NextColumn();
      }
  };

  class ColorEdit4 : public Element {

    public:
      ColorEdit4()
        : label(NULL),col{0.0f},flags(0)
      {
      }
      virtual ~ColorEdit4() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::ColorEdit4(label, col, flags);
      }
      char* label;
      float col[4];
      ImGuiColorEditFlags flags;
  };

  class SmallButton : public Element {

    public:
      SmallButton()
        : label(NULL)
      {
      }
      virtual ~SmallButton() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::SmallButton(label);
      }
      char* label;
  };

  class Child : public ContainerElement {

    public:
      Child()
        : str_id(NULL),size(ImVec2(0,0)),border(false),flags(0)
      {
      }
      virtual ~Child() {
        if(str_id != NULL) ImGui::MemFree(str_id);
      }

      void renderBody() {
        ImGui::BeginChild(str_id, size, border, flags);
        ContainerElement::renderBody();
        ImGui::EndChild();
      }
      char* str_id;
      ImVec2 size;
      bool border;
      ImGuiWindowFlags flags;
  };

  class DragDropSource : public ContainerElement {

    public:
      DragDropSource()
        : flags(0)
      {
      }

      void renderBody() {
        if(ImGui::BeginDragDropSource(flags)) {
          ContainerElement::renderBody();
          ImGui::EndDragDropSource();
        }
      }
      ImGuiDragDropFlags flags;
  };

  class PopupContextItem : public ContainerElement {

    public:
      PopupContextItem()
        : str_id(NULL),mouse_button(1)
      {
      }
      virtual ~PopupContextItem() {
        if(str_id != NULL) ImGui::MemFree(str_id);
      }

      void renderBody() {
        if(ImGui::BeginPopupContextItem(str_id, mouse_button)) {
          ContainerElement::renderBody();
          ImGui::EndPopup();
        }
      }
      char* str_id;
      int mouse_button;
  };

  class InputInt : public Element {

    public:
      InputInt()
        : label(NULL),v(0),step(1),step_fast(100),flags(0)
      {
      }
      virtual ~InputInt() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::InputInt(label, &v, step, step_fast, flags);
      }
      char* label;
      int v;
      int step;
      int step_fast;
      ImGuiInputTextFlags flags;
  };

  class TabItem : public ContainerElement {

    public:
      TabItem()
        : label(NULL),p_open(true),flags(0)
      {
      }
      virtual ~TabItem() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        if(ImGui::BeginTabItem(label, &p_open, flags)) {
          ContainerElement::renderBody();
          ImGui::EndTabItem();
        }
      }
      char* label;
      bool p_open;
      ImGuiTabItemFlags flags;
  };

  class TabBar : public ContainerElement {

    public:
      TabBar()
        : str_id(NULL),flags(0)
      {
      }
      virtual ~TabBar() {
        if(str_id != NULL) ImGui::MemFree(str_id);
      }

      void renderBody() {
        if(ImGui::BeginTabBar(str_id, flags)) {
          ContainerElement::renderBody();
          ImGui::EndTabBar();
        }
      }
      char* str_id;
      ImGuiTabBarFlags flags;
  };

  class Dummy : public Element {

    public:
      Dummy()
      {
      }

      void renderBody() {
        ImGui::Dummy(size);
      }
      ImVec2 size;
  };

  class Unindent : public Element {

    public:
      Unindent()
        : indent_w(0.0f)
      {
      }

      void renderBody() {
        ImGui::Unindent(indent_w);
      }
      float indent_w;
  };

  class Indent : public Element {

    public:
      Indent()
        : indent_w(0.0f)
      {
      }

      void renderBody() {
        ImGui::Indent(indent_w);
      }
      float indent_w;
  };

  class Bullet : public Element {

    public:
      Bullet()
      {
      }

      void renderBody() {
        ImGui::Bullet();
      }
  };

  class Button : public Element {

    public:
      Button()
        : label(NULL),size(ImVec2(0,0))
      {
      }
      virtual ~Button() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::Button(label, size);
      }
      char* label;
      ImVec2 size;
  };

  class InputFloat2 : public Element {

    public:
      InputFloat2()
        : label(NULL),v{0.0f},format(ImStrdup("%.3f")),flags(0)
      {
      }
      virtual ~InputFloat2() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::InputFloat2(label, v, format, flags);
      }
      char* label;
      float v[2];
      char* format;
      ImGuiInputTextFlags flags;
  };

  class ColorPicker4 : public Element {

    public:
      ColorPicker4()
        : label(NULL),col{0.0f},flags(0),ref_col(NULL)
      {
      }
      virtual ~ColorPicker4() {
        if(label != NULL) ImGui::MemFree(label);
        if(ref_col != NULL) ImGui::MemFree(ref_col);
      }

      void renderBody() {
        ImGui::ColorPicker4(label, col, flags, ref_col);
      }
      char* label;
      float col[4];
      ImGuiColorEditFlags flags;
      float* ref_col;
  };

  class InputFloat : public Element {

    public:
      InputFloat()
        : label(NULL),v(NULL),step(0.0f),step_fast(0.0f),format(ImStrdup("%.3f")),flags(0)
      {
      }
      virtual ~InputFloat() {
        if(label != NULL) ImGui::MemFree(label);
        if(v != NULL) ImGui::MemFree(v);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::InputFloat(label, v, step, step_fast, format, flags);
      }
      char* label;
      float* v;
      float step;
      float step_fast;
      char* format;
      ImGuiInputTextFlags flags;
  };

  class RadioButton : public Element {

    public:
      RadioButton()
        : label(NULL),active(true)
      {
      }
      virtual ~RadioButton() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::RadioButton(label, active);
      }
      char* label;
      bool active;
  };

  class Checkbox : public Element {

    public:
      Checkbox()
        : label(NULL),v(true)
      {
      }
      virtual ~Checkbox() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::Checkbox(label, &v);
      }
      char* label;
      bool v;
  };

  class Separator : public Element {

    public:
      Separator()
      {
      }

      void renderBody() {
        ImGui::Separator();
      }
  };

  class VSliderFloat : public Element {

    public:
      VSliderFloat()
        : label(NULL),v(NULL),v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),power(1.0f)
      {
      }
      virtual ~VSliderFloat() {
        if(label != NULL) ImGui::MemFree(label);
        if(v != NULL) ImGui::MemFree(v);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::VSliderFloat(label, size, v, v_min, v_max, format, power);
      }
      char* label;
      ImVec2 size;
      float* v;
      float v_min;
      float v_max;
      char* format;
      float power;
  };

  class PopupModal : public ContainerElement {

    public:
      PopupModal()
        : name(NULL),p_open(true),flags(0)
      {
      }
      virtual ~PopupModal() {
        if(name != NULL) ImGui::MemFree(name);
      }

      void renderBody() {
        if(ImGui::BeginPopupModal(name, &p_open, flags)) {
          ContainerElement::renderBody();
          ImGui::EndPopup();
        }
      }
      char* name;
      bool p_open;
      ImGuiWindowFlags flags;
  };

  class DragFloat : public Element {

    public:
      DragFloat()
        : label(NULL),v(NULL),v_speed(1.0f),v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),power(1.0f)
      {
      }
      virtual ~DragFloat() {
        if(label != NULL) ImGui::MemFree(label);
        if(v != NULL) ImGui::MemFree(v);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::DragFloat(label, v, v_speed, v_min, v_max, format, power);
      }
      char* label;
      float* v;
      float v_speed;
      float v_min;
      float v_max;
      char* format;
      float power;
  };

  class PopupContextVoid : public ContainerElement {

    public:
      PopupContextVoid()
        : str_id(NULL),mouse_button(1)
      {
      }
      virtual ~PopupContextVoid() {
        if(str_id != NULL) ImGui::MemFree(str_id);
      }

      void renderBody() {
        if(ImGui::BeginPopupContextVoid(str_id, mouse_button)) {
          ContainerElement::renderBody();
          ImGui::EndPopup();
        }
      }
      char* str_id;
      int mouse_button;
  };

  class Columns : public Element {

    public:
      Columns()
        : count(1),id(NULL),border(true)
      {
      }
      virtual ~Columns() {
        if(id != NULL) ImGui::MemFree(id);
      }

      void renderBody() {
        ImGui::Columns(count, id, border);
      }
      int count;
      char* id;
      bool border;
  };

  class ColorButton : public Element {

    public:
      ColorButton()
        : desc_id(NULL),flags(0),size(ImVec2(0,0))
      {
      }
      virtual ~ColorButton() {
        if(desc_id != NULL) ImGui::MemFree(desc_id);
      }

      void renderBody() {
        ImGui::ColorButton(desc_id, col, flags, size);
      }
      char* desc_id;
      ImVec4 col;
      ImGuiColorEditFlags flags;
      ImVec2 size;
  };

  class SliderInt4 : public Element {

    public:
      SliderInt4()
        : label(NULL),v{0},v_min(0),v_max(0),format(ImStrdup("%d"))
      {
      }
      virtual ~SliderInt4() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::SliderInt4(label, v, v_min, v_max, format);
      }
      char* label;
      int v[4];
      int v_min;
      int v_max;
      char* format;
  };

  class PlotHistogram : public Element {

    public:
      PlotHistogram()
        : label(NULL),values(NULL),values_count(0),values_offset(0),overlay_text(NULL),scale_min(FLT_MAX),scale_max(FLT_MAX),graph_size(ImVec2(0, 0)),stride(sizeof(float))
      {
      }
      virtual ~PlotHistogram() {
        if(label != NULL) ImGui::MemFree(label);
        if(values != NULL) ImGui::MemFree(values);
        if(overlay_text != NULL) ImGui::MemFree(overlay_text);
      }

      void renderBody() {
        ImGui::PlotHistogram(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
      }
      char* label;
      float* values;
      int values_count;
      int values_offset;
      char* overlay_text;
      float scale_min;
      float scale_max;
      ImVec2 graph_size;
      int stride;
  };

  class TextUnformatted : public Element {

    public:
      TextUnformatted()
        : text(NULL),text_end(NULL)
      {
      }
      virtual ~TextUnformatted() {
        if(text != NULL) ImGui::MemFree(text);
        if(text_end != NULL) ImGui::MemFree(text_end);
      }

      void renderBody() {
        ImGui::TextUnformatted(text, text_end);
      }
      char* text;
      char* text_end;
  };

  class InputInt2 : public Element {

    public:
      InputInt2()
        : label(NULL),v{0},flags(0)
      {
      }
      virtual ~InputInt2() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::InputInt2(label, v, flags);
      }
      char* label;
      int v[2];
      ImGuiInputTextFlags flags;
  };

  class SliderInt2 : public Element {

    public:
      SliderInt2()
        : label(NULL),v{0},v_min(0),v_max(0),format(ImStrdup("%d"))
      {
      }
      virtual ~SliderInt2() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::SliderInt2(label, v, v_min, v_max, format);
      }
      char* label;
      int v[2];
      int v_min;
      int v_max;
      char* format;
  };

  class SliderInt3 : public Element {

    public:
      SliderInt3()
        : label(NULL),v{0},v_min(0),v_max(0),format(ImStrdup("%d"))
      {
      }
      virtual ~SliderInt3() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::SliderInt3(label, v, v_min, v_max, format);
      }
      char* label;
      int v[3];
      int v_min;
      int v_max;
      char* format;
  };

  class ImageButton : public Element {

    public:
      ImageButton()
        : user_texture_id(NULL),uv0(ImVec2(0,0)),uv1(ImVec2(1,1)),frame_padding(-1),bg_col(ImVec4(0,0,0,0)),tint_col(ImVec4(1,1,1,1))
      {
      }

      void renderBody() {
        ImGui::ImageButton(user_texture_id, size, uv0, uv1, frame_padding, bg_col, tint_col);
      }
      ImTextureID user_texture_id;
      ImVec2 size;
      ImVec2 uv0;
      ImVec2 uv1;
      int frame_padding;
      ImVec4 bg_col;
      ImVec4 tint_col;
  };

  class DragFloat3 : public Element {

    public:
      DragFloat3()
        : label(NULL),v{0.0f},v_speed(1.0f),v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),power(1.0f)
      {
      }
      virtual ~DragFloat3() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::DragFloat3(label, v, v_speed, v_min, v_max, format, power);
      }
      char* label;
      float v[3];
      float v_speed;
      float v_min;
      float v_max;
      char* format;
      float power;
  };

  class Image : public Element {

    public:
      Image()
        : user_texture_id(NULL),uv0(ImVec2(0,0)),uv1(ImVec2(1,1)),tint_col(ImVec4(1,1,1,1)),border_col(ImVec4(0,0,0,0))
      {
      }

      void renderBody() {
        ImGui::Image(user_texture_id, size, uv0, uv1, tint_col, border_col);
      }
      ImTextureID user_texture_id;
      ImVec2 size;
      ImVec2 uv0;
      ImVec2 uv1;
      ImVec4 tint_col;
      ImVec4 border_col;
  };

  class InputTextWithHint : public Element {

    public:
      InputTextWithHint()
        : label(NULL),hint(NULL),buf(NULL),buf_size(512),flags(0),callback(NULL),user_data(NULL)
      {
        buf = (char*)ImGui::MemAlloc(buf_size);
        buf[0] = '\0';
      }
      virtual ~InputTextWithHint() {
        if(label != NULL) ImGui::MemFree(label);
        if(hint != NULL) ImGui::MemFree(hint);
        if(buf != NULL) ImGui::MemFree(buf);
      }

      void renderBody() {
        ImGui::InputTextWithHint(label, hint, buf, buf_size, flags, callback, user_data);
      }
      char* label;
      char* hint;
      char* buf;
      size_t buf_size;
      ImGuiInputTextFlags flags;
      ImGuiInputTextCallback callback;
      void* user_data;
  };

  class ColorPicker3 : public Element {

    public:
      ColorPicker3()
        : label(NULL),col{0.0f},flags(0)
      {
      }
      virtual ~ColorPicker3() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::ColorPicker3(label, col, flags);
      }
      char* label;
      float col[3];
      ImGuiColorEditFlags flags;
  };

  class DragFloat4 : public Element {

    public:
      DragFloat4()
        : label(NULL),v{0.0f},v_speed(1.0f),v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),power(1.0f)
      {
      }
      virtual ~DragFloat4() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::DragFloat4(label, v, v_speed, v_min, v_max, format, power);
      }
      char* label;
      float v[4];
      float v_speed;
      float v_min;
      float v_max;
      char* format;
      float power;
  };

  class ProgressBar : public Element {

    public:
      ProgressBar()
        : fraction(0.0f),size_arg(ImVec2(-1,0)),overlay(NULL)
      {
      }
      virtual ~ProgressBar() {
        if(overlay != NULL) ImGui::MemFree(overlay);
      }

      void renderBody() {
        ImGui::ProgressBar(fraction, size_arg, overlay);
      }
      float fraction;
      ImVec2 size_arg;
      char* overlay;
  };

  class DragFloat2 : public Element {

    public:
      DragFloat2()
        : label(NULL),v{0.0f},v_speed(1.0f),v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),power(1.0f)
      {
      }
      virtual ~DragFloat2() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::DragFloat2(label, v, v_speed, v_min, v_max, format, power);
      }
      char* label;
      float v[2];
      float v_speed;
      float v_min;
      float v_max;
      char* format;
      float power;
  };

  class VSliderInt : public Element {

    public:
      VSliderInt()
        : label(NULL),v(0),v_min(0),v_max(0),format(ImStrdup("%d"))
      {
      }
      virtual ~VSliderInt() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::VSliderInt(label, size, &v, v_min, v_max, format);
      }
      char* label;
      ImVec2 size;
      int v;
      int v_min;
      int v_max;
      char* format;
  };

  class SameLine : public Element {

    public:
      SameLine()
        : offset_from_start_x(0.0f),spacing(-1.0f)
      {
      }

      void renderBody() {
        ImGui::SameLine(offset_from_start_x, spacing);
      }
      float offset_from_start_x;
      float spacing;
  };

  class InputFloat4 : public Element {

    public:
      InputFloat4()
        : label(NULL),v{0.0f},format(ImStrdup("%.3f")),flags(0)
      {
      }
      virtual ~InputFloat4() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::InputFloat4(label, v, format, flags);
      }
      char* label;
      float v[4];
      char* format;
      ImGuiInputTextFlags flags;
  };

  class InputText : public Element {

    public:
      InputText()
        : label(NULL),buf(NULL),buf_size(512),flags(0),callback(NULL),user_data(NULL)
      {
        buf = (char*)ImGui::MemAlloc(buf_size);
        buf[0] = '\0';
      }
      virtual ~InputText() {
        if(label != NULL) ImGui::MemFree(label);
        if(buf != NULL) ImGui::MemFree(buf);
      }

      void renderBody() {
        ImGui::InputText(label, buf, buf_size, flags, callback, user_data);
      }
      char* label;
      char* buf;
      size_t buf_size;
      ImGuiInputTextFlags flags;
      ImGuiInputTextCallback callback;
      void* user_data;
  };

  class ArrowButton : public Element {

    public:
      ArrowButton()
        : str_id(NULL)
      {
      }
      virtual ~ArrowButton() {
        if(str_id != NULL) ImGui::MemFree(str_id);
      }

      void renderBody() {
        ImGui::ArrowButton(str_id, dir);
      }
      char* str_id;
      ImGuiDir dir;
  };

  class SliderFloat : public Element {

    public:
      SliderFloat()
        : label(NULL),v(NULL),v_min(0.0f),v_max(0.0f),format(ImStrdup("%.3f")),power(1.0f)
      {
      }
      virtual ~SliderFloat() {
        if(label != NULL) ImGui::MemFree(label);
        if(v != NULL) ImGui::MemFree(v);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::SliderFloat(label, v, v_min, v_max, format, power);
      }
      char* label;
      float* v;
      float v_min;
      float v_max;
      char* format;
      float power;
  };

  class InputInt4 : public Element {

    public:
      InputInt4()
        : label(NULL),v{0},flags(0)
      {
      }
      virtual ~InputInt4() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        ImGui::InputInt4(label, v, flags);
      }
      char* label;
      int v[4];
      ImGuiInputTextFlags flags;
  };

  class DragInt : public Element {

    public:
      DragInt()
        : label(NULL),v(0),v_speed(1.0f),v_min(0),v_max(0),format(ImStrdup("%d"))
      {
      }
      virtual ~DragInt() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
      }

      void renderBody() {
        ImGui::DragInt(label, &v, v_speed, v_min, v_max, format);
      }
      char* label;
      int v;
      float v_speed;
      int v_min;
      int v_max;
      char* format;
  };

  class DragIntRange2 : public Element {

    public:
      DragIntRange2()
        : label(NULL),v_current_min(0),v_current_max(0),v_speed(1.0f),v_min(0),v_max(0),format(ImStrdup("%d")),format_max(NULL)
      {
      }
      virtual ~DragIntRange2() {
        if(label != NULL) ImGui::MemFree(label);
        if(format != NULL) ImGui::MemFree(format);
        if(format_max != NULL) ImGui::MemFree(format_max);
      }

      void renderBody() {
        ImGui::DragIntRange2(label, &v_current_min, &v_current_max, v_speed, v_min, v_max, format, format_max);
      }
      char* label;
      int v_current_min;
      int v_current_max;
      float v_speed;
      int v_min;
      int v_max;
      char* format;
      char* format_max;
  };

  // manually defined classes
  class CollapsingHeader : public ContainerElement {

    public:
      CollapsingHeader()
        : label(NULL),flags(0)
      {
      }
      virtual ~CollapsingHeader() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        if(ImGui::CollapsingHeader(label, flags))
          ContainerElement::renderBody();
      }
      char* label;
      ImGuiTreeNodeFlags flags;
  };

  // fills in all default elements to the element element factory
  static ElementFactory* createElementFactory()
  {
    ElementFactory* res = new ElementFactory();
    ElementFactory& factory = *res;
    factory.element<SliderAngle>("slider-angle")
      .text(&SliderAngle::label, true)
      .attribute("v-rad", &SliderAngle::v_rad, true)
      .attribute("v-degrees-min", &SliderAngle::v_degrees_min)
      .attribute("v-degrees-max", &SliderAngle::v_degrees_max)
      .attribute("format", &SliderAngle::format);

    factory.element<Group>("group");

    factory.element<InputInt3>("input-int3")
      .text(&InputInt3::label, true)
      .attribute("v", &InputInt3::v, true)
      .attribute("flags", &InputInt3::flags);

    factory.element<InputDouble>("input-double")
      .text(&InputDouble::label, true)
      .attribute("v", &InputDouble::v, true)
      .attribute("step", &InputDouble::step)
      .attribute("step-fast", &InputDouble::step_fast)
      .attribute("format", &InputDouble::format)
      .attribute("flags", &InputDouble::flags);

    factory.element<Menu>("menu")
      .attribute("label", &Menu::label, true)
      .attribute("enabled", &Menu::enabled);

    factory.element<MainMenuBar>("main-menu-bar");

    factory.element<NewLine>("new-line");

    factory.element<Tooltip>("tooltip");

    factory.element<DragInt3>("drag-int3")
      .text(&DragInt3::label)
      .attribute("v", &DragInt3::v)
      .attribute("v-speed", &DragInt3::v_speed)
      .attribute("v-min", &DragInt3::v_min)
      .attribute("v-max", &DragInt3::v_max)
      .attribute("format", &DragInt3::format);

    factory.element<DragInt2>("drag-int2")
      .text(&DragInt2::label)
      .attribute("v", &DragInt2::v)
      .attribute("v-speed", &DragInt2::v_speed)
      .attribute("v-min", &DragInt2::v_min)
      .attribute("v-max", &DragInt2::v_max)
      .attribute("format", &DragInt2::format);

    factory.element<Window>("window")
      .attribute("name", &Window::name, true)
      .attribute("p-open", &Window::p_open)
      .attribute("flags", &Window::flags);

    factory.element<SliderInt>("slider-int")
      .text(&SliderInt::label)
      .attribute("v", &SliderInt::v)
      .attribute("v-min", &SliderInt::v_min)
      .attribute("v-max", &SliderInt::v_max)
      .attribute("format", &SliderInt::format);

    factory.element<DragInt4>("drag-int4")
      .text(&DragInt4::label)
      .attribute("v", &DragInt4::v)
      .attribute("v-speed", &DragInt4::v_speed)
      .attribute("v-min", &DragInt4::v_min)
      .attribute("v-max", &DragInt4::v_max)
      .attribute("format", &DragInt4::format);

    factory.element<InputFloat3>("input-float3")
      .text(&InputFloat3::label)
      .attribute("v", &InputFloat3::v)
      .attribute("format", &InputFloat3::format)
      .attribute("flags", &InputFloat3::flags);

    factory.element<InvisibleButton>("invisible-button")
      .attribute("str-id", &InvisibleButton::str_id, true)
      .attribute("size", &InvisibleButton::size, true);

    factory.element<Combo>("combo")
      .attribute("label", &Combo::label, true)
      .attribute("preview-value", &Combo::preview_value)
      .attribute("flags", &Combo::flags);

    factory.element<MenuItem>("menu-item")
      .text(&MenuItem::label)
      .attribute("shortcut", &MenuItem::shortcut)
      .attribute("selected", &MenuItem::selected)
      .attribute("enabled", &MenuItem::enabled);

    factory.element<SliderFloat3>("slider-float3")
      .text(&SliderFloat3::label)
      .attribute("v", &SliderFloat3::v)
      .attribute("v-min", &SliderFloat3::v_min)
      .attribute("v-max", &SliderFloat3::v_max)
      .attribute("format", &SliderFloat3::format)
      .attribute("power", &SliderFloat3::power);

    factory.element<SliderFloat2>("slider-float2")
      .text(&SliderFloat2::label)
      .attribute("v", &SliderFloat2::v)
      .attribute("v-min", &SliderFloat2::v_min)
      .attribute("v-max", &SliderFloat2::v_max)
      .attribute("format", &SliderFloat2::format)
      .attribute("power", &SliderFloat2::power);

    factory.element<SliderFloat4>("slider-float4")
      .text(&SliderFloat4::label)
      .attribute("v", &SliderFloat4::v)
      .attribute("v-min", &SliderFloat4::v_min)
      .attribute("v-max", &SliderFloat4::v_max)
      .attribute("format", &SliderFloat4::format)
      .attribute("power", &SliderFloat4::power);

    factory.element<ComboItem>("combo-item")
      .text(&ComboItem::label)
      .attribute("current-item", &ComboItem::current_item)
      .attribute("items", &ComboItem::items)
      .attribute("items-count", &ComboItem::items_count)
      .attribute("popup-max-height-in-items", &ComboItem::popup_max_height_in_items);

    factory.element<MenuBar>("menu-bar");

    factory.element<AlignTextToFramePadding>("align-text-to-frame-padding");

    factory.element<Popup>("popup")
      .attribute("str-id", &Popup::str_id)
      .attribute("flags", &Popup::flags);

    factory.element<PopupContextWindow>("popup-context-window")
      .attribute("str-id", &PopupContextWindow::str_id)
      .attribute("mouse-button", &PopupContextWindow::mouse_button)
      .attribute("also-over-items", &PopupContextWindow::also_over_items);

    factory.element<DragFloatRange2>("drag-float-range2")
      .text(&DragFloatRange2::label, true)
      .attribute("v-current-min", &DragFloatRange2::v_current_min, true)
      .attribute("v-current-max", &DragFloatRange2::v_current_max, true)
      .attribute("v-speed", &DragFloatRange2::v_speed)
      .attribute("v-min", &DragFloatRange2::v_min)
      .attribute("v-max", &DragFloatRange2::v_max)
      .attribute("format", &DragFloatRange2::format)
      .attribute("format-max", &DragFloatRange2::format_max)
      .attribute("power", &DragFloatRange2::power);

    factory.element<ChildFrame>("child-frame")
      .attribute("id", &ChildFrame::id, true)
      .attribute("size", &ChildFrame::size)
      .attribute("flags", &ChildFrame::flags);

    factory.element<PlotLines>("plot-lines")
      .text(&PlotLines::label)
      .attribute("values", &PlotLines::values)
      .attribute("values-count", &PlotLines::values_count)
      .attribute("values-offset", &PlotLines::values_offset)
      .attribute("overlay-text", &PlotLines::overlay_text)
      .attribute("scale-min", &PlotLines::scale_min)
      .attribute("scale-max", &PlotLines::scale_max)
      .attribute("graph-size", &PlotLines::graph_size)
      .attribute("stride", &PlotLines::stride);

    factory.element<Spacing>("spacing");

    factory.element<InputTextMultiline>("input-text-multiline")
      .text(&InputTextMultiline::label)
      .attribute("buf", &InputTextMultiline::buf)
      .attribute("buf-size", &InputTextMultiline::buf_size)
      .attribute("size", &InputTextMultiline::size)
      .attribute("flags", &InputTextMultiline::flags)
      .attribute("callback", &InputTextMultiline::callback)
      .attribute("user-data", &InputTextMultiline::user_data);

    factory.element<Selectable>("selectable")
      .text(&Selectable::label)
      .attribute("selected", &Selectable::selected)
      .attribute("flags", &Selectable::flags)
      .attribute("size", &Selectable::size);

    factory.element<DragDropTarget>("drag-drop-target");

    factory.element<ColorEdit3>("color-edit3")
      .text(&ColorEdit3::label, true)
      .attribute("col", &ColorEdit3::col, true)
      .attribute("flags", &ColorEdit3::flags);

    factory.element<NextColumn>("next-column");

    factory.element<ColorEdit4>("color-edit4")
      .text(&ColorEdit4::label, true)
      .attribute("col", &ColorEdit4::col, true)
      .attribute("flags", &ColorEdit4::flags);

    factory.element<SmallButton>("small-button")
      .text(&SmallButton::label, true);

    factory.element<Child>("child")
      .attribute("str-id", &Child::str_id, true)
      .attribute("size", &Child::size)
      .attribute("border", &Child::border)
      .attribute("flags", &Child::flags);

    factory.element<DragDropSource>("drag-drop-source")
      .attribute("flags", &DragDropSource::flags);

    factory.element<PopupContextItem>("popup-context-item")
      .attribute("str-id", &PopupContextItem::str_id)
      .attribute("mouse-button", &PopupContextItem::mouse_button);

    factory.element<InputInt>("input-int")
      .text(&InputInt::label)
      .attribute("v", &InputInt::v)
      .attribute("step", &InputInt::step)
      .attribute("step-fast", &InputInt::step_fast)
      .attribute("flags", &InputInt::flags);

    factory.element<TabItem>("tab-item")
      .attribute("label", &TabItem::label, true)
      .attribute("p-open", &TabItem::p_open)
      .attribute("flags", &TabItem::flags);

    factory.element<TabBar>("tab-bar")
      .attribute("str-id", &TabBar::str_id, true)
      .attribute("flags", &TabBar::flags);

    factory.element<Dummy>("dummy")
      .attribute("size", &Dummy::size);

    factory.element<Unindent>("unindent")
      .attribute("indent-w", &Unindent::indent_w);

    factory.element<Indent>("indent")
      .attribute("indent-w", &Indent::indent_w);

    factory.element<Bullet>("bullet");

    factory.element<Button>("button")
      .text(&Button::label, true)
      .attribute("size", &Button::size);

    factory.element<InputFloat2>("input-float2")
      .text(&InputFloat2::label)
      .attribute("v", &InputFloat2::v)
      .attribute("format", &InputFloat2::format)
      .attribute("flags", &InputFloat2::flags);

    factory.element<ColorPicker4>("color-picker4")
      .text(&ColorPicker4::label)
      .attribute("col", &ColorPicker4::col, true)
      .attribute("flags", &ColorPicker4::flags)
      .attribute("ref-col", &ColorPicker4::ref_col);

    factory.element<InputFloat>("input-float")
      .text(&InputFloat::label, true)
      .attribute("v", &InputFloat::v, true)
      .attribute("step", &InputFloat::step)
      .attribute("step-fast", &InputFloat::step_fast)
      .attribute("format", &InputFloat::format)
      .attribute("flags", &InputFloat::flags);

    factory.element<RadioButton>("radio-button")
      .text(&RadioButton::label, true)
      .attribute("active", &RadioButton::active);

    factory.element<Checkbox>("checkbox")
      .text(&Checkbox::label, true)
      .attribute("v", &Checkbox::v);

    factory.element<Separator>("separator");

    factory.element<VSliderFloat>("v-slider-float")
      .text(&VSliderFloat::label, true)
      .attribute("size", &VSliderFloat::size)
      .attribute("v", &VSliderFloat::v, true)
      .attribute("v-min", &VSliderFloat::v_min)
      .attribute("v-max", &VSliderFloat::v_max)
      .attribute("format", &VSliderFloat::format)
      .attribute("power", &VSliderFloat::power);

    factory.element<PopupModal>("popup-modal")
      .attribute("name", &PopupModal::name, true)
      .attribute("p-open", &PopupModal::p_open)
      .attribute("flags", &PopupModal::flags);

    factory.element<DragFloat>("drag-float")
      .text(&DragFloat::label, true)
      .attribute("v", &DragFloat::v, true)
      .attribute("v-speed", &DragFloat::v_speed)
      .attribute("v-min", &DragFloat::v_min)
      .attribute("v-max", &DragFloat::v_max)
      .attribute("format", &DragFloat::format)
      .attribute("power", &DragFloat::power);

    factory.element<PopupContextVoid>("popup-context-void")
      .attribute("str-id", &PopupContextVoid::str_id)
      .attribute("mouse-button", &PopupContextVoid::mouse_button);

    factory.element<Columns>("columns")
      .attribute("count", &Columns::count)
      .attribute("id", &Columns::id)
      .attribute("border", &Columns::border);

    factory.element<ColorButton>("color-button")
      .attribute("desc-id", &ColorButton::desc_id, true)
      .attribute("col", &ColorButton::col, true)
      .attribute("flags", &ColorButton::flags)
      .attribute("size", &ColorButton::size);

    factory.element<SliderInt4>("slider-int4")
      .text(&SliderInt4::label)
      .attribute("v", &SliderInt4::v)
      .attribute("v-min", &SliderInt4::v_min)
      .attribute("v-max", &SliderInt4::v_max)
      .attribute("format", &SliderInt4::format);

    factory.element<PlotHistogram>("plot-histogram")
      .text(&PlotHistogram::label)
      .attribute("values", &PlotHistogram::values)
      .attribute("values-count", &PlotHistogram::values_count)
      .attribute("values-offset", &PlotHistogram::values_offset)
      .attribute("overlay-text", &PlotHistogram::overlay_text)
      .attribute("scale-min", &PlotHistogram::scale_min)
      .attribute("scale-max", &PlotHistogram::scale_max)
      .attribute("graph-size", &PlotHistogram::graph_size)
      .attribute("stride", &PlotHistogram::stride);

    factory.element<TextUnformatted>("text-unformatted")
      .text(&TextUnformatted::text)
      .attribute("text-end", &TextUnformatted::text_end);

    factory.element<InputInt2>("input-int2")
      .text(&InputInt2::label, true)
      .attribute("v", &InputInt2::v, true)
      .attribute("flags", &InputInt2::flags);

    factory.element<SliderInt2>("slider-int2")
      .text(&SliderInt2::label)
      .attribute("v", &SliderInt2::v)
      .attribute("v-min", &SliderInt2::v_min)
      .attribute("v-max", &SliderInt2::v_max)
      .attribute("format", &SliderInt2::format);

    factory.element<SliderInt3>("slider-int3")
      .text(&SliderInt3::label)
      .attribute("v", &SliderInt3::v)
      .attribute("v-min", &SliderInt3::v_min)
      .attribute("v-max", &SliderInt3::v_max)
      .attribute("format", &SliderInt3::format);

    factory.element<ImageButton>("image-button")
      .attribute("user-texture-id", &ImageButton::user_texture_id)
      .attribute("size", &ImageButton::size)
      .attribute("uv0", &ImageButton::uv0)
      .attribute("uv1", &ImageButton::uv1)
      .attribute("frame-padding", &ImageButton::frame_padding)
      .attribute("bg-col", &ImageButton::bg_col)
      .attribute("tint-col", &ImageButton::tint_col);

    factory.element<DragFloat3>("drag-float3")
      .text(&DragFloat3::label)
      .attribute("v", &DragFloat3::v)
      .attribute("v-speed", &DragFloat3::v_speed)
      .attribute("v-min", &DragFloat3::v_min)
      .attribute("v-max", &DragFloat3::v_max)
      .attribute("format", &DragFloat3::format)
      .attribute("power", &DragFloat3::power);

    factory.element<Image>("image")
      .attribute("user-texture-id", &Image::user_texture_id)
      .attribute("size", &Image::size)
      .attribute("uv0", &Image::uv0)
      .attribute("uv1", &Image::uv1)
      .attribute("tint-col", &Image::tint_col)
      .attribute("border-col", &Image::border_col);

    factory.element<InputTextWithHint>("input-text-with-hint")
      .text(&InputTextWithHint::label, true)
      .attribute("hint", &InputTextWithHint::hint)
      .attribute("buf", &InputTextWithHint::buf)
      .attribute("buf-size", &InputTextWithHint::buf_size)
      .attribute("flags", &InputTextWithHint::flags)
      .attribute("callback", &InputTextWithHint::callback)
      .attribute("user-data", &InputTextWithHint::user_data);

    factory.element<ColorPicker3>("color-picker3")
      .text(&ColorPicker3::label)
      .attribute("col", &ColorPicker3::col, true)
      .attribute("flags", &ColorPicker3::flags);

    factory.element<DragFloat4>("drag-float4")
      .text(&DragFloat4::label)
      .attribute("v", &DragFloat4::v)
      .attribute("v-speed", &DragFloat4::v_speed)
      .attribute("v-min", &DragFloat4::v_min)
      .attribute("v-max", &DragFloat4::v_max)
      .attribute("format", &DragFloat4::format)
      .attribute("power", &DragFloat4::power);

    factory.element<ProgressBar>("progress-bar")
      .attribute("fraction", &ProgressBar::fraction)
      .attribute("size-arg", &ProgressBar::size_arg)
      .attribute("overlay", &ProgressBar::overlay);

    factory.element<DragFloat2>("drag-float2")
      .text(&DragFloat2::label)
      .attribute("v", &DragFloat2::v)
      .attribute("v-speed", &DragFloat2::v_speed)
      .attribute("v-min", &DragFloat2::v_min)
      .attribute("v-max", &DragFloat2::v_max)
      .attribute("format", &DragFloat2::format)
      .attribute("power", &DragFloat2::power);

    factory.element<VSliderInt>("v-slider-int")
      .text(&VSliderInt::label)
      .attribute("size", &VSliderInt::size)
      .attribute("v", &VSliderInt::v)
      .attribute("v-min", &VSliderInt::v_min)
      .attribute("v-max", &VSliderInt::v_max)
      .attribute("format", &VSliderInt::format);

    factory.element<SameLine>("same-line")
      .attribute("offset-from-start-x", &SameLine::offset_from_start_x)
      .attribute("spacing", &SameLine::spacing);

    factory.element<InputFloat4>("input-float4")
      .text(&InputFloat4::label)
      .attribute("v", &InputFloat4::v)
      .attribute("format", &InputFloat4::format)
      .attribute("flags", &InputFloat4::flags);

    factory.element<InputText>("input-text")
      .text(&InputText::label)
      .attribute("buf", &InputText::buf)
      .attribute("buf-size", &InputText::buf_size)
      .attribute("flags", &InputText::flags)
      .attribute("callback", &InputText::callback)
      .attribute("user-data", &InputText::user_data);

    factory.element<ArrowButton>("arrow-button")
      .attribute("str-id", &ArrowButton::str_id, true)
      .attribute("dir", &ArrowButton::dir, true);

    factory.element<SliderFloat>("slider-float")
      .text(&SliderFloat::label, true)
      .attribute("v", &SliderFloat::v, true)
      .attribute("v-min", &SliderFloat::v_min)
      .attribute("v-max", &SliderFloat::v_max)
      .attribute("format", &SliderFloat::format)
      .attribute("power", &SliderFloat::power);

    factory.element<InputInt4>("input-int4")
      .text(&InputInt4::label, true)
      .attribute("v", &InputInt4::v, true)
      .attribute("flags", &InputInt4::flags);

    factory.element<DragInt>("drag-int")
      .text(&DragInt::label)
      .attribute("v", &DragInt::v)
      .attribute("v-speed", &DragInt::v_speed)
      .attribute("v-min", &DragInt::v_min)
      .attribute("v-max", &DragInt::v_max)
      .attribute("format", &DragInt::format);

    factory.element<DragIntRange2>("drag-int-range2")
      .text(&DragIntRange2::label)
      .attribute("v-current-min", &DragIntRange2::v_current_min)
      .attribute("v-current-max", &DragIntRange2::v_current_max)
      .attribute("v-speed", &DragIntRange2::v_speed)
      .attribute("v-min", &DragIntRange2::v_min)
      .attribute("v-max", &DragIntRange2::v_max)
      .attribute("format", &DragIntRange2::format)
      .attribute("format-max", &DragIntRange2::format_max);


    factory.element<CollapsingHeader>("collapsing-header")
      .attribute("label", &CollapsingHeader::label)
      .attribute("flags", &CollapsingHeader::flags);

      // register some built-in element types
    factory.element<Document>("template");
    factory.element<Element>("__element__")
        .handler<MouseEventHandler>("click")
        .handler<MouseEventHandler>("mousedown")
        .handler<MouseEventHandler>("mouseup")
        .handler<MouseEventHandler>("mouseover")
        .handler<MouseEventHandler>("mouseout")
        .handler<ChangeEventHandler>("change")
        .handler<KeyboardEventHandler>("keydown")
        .handler<KeyboardEventHandler>("keyup")
        .handler<KeyboardEventHandler>("keypress")
        .attribute("id", &Element::id)
        .attribute("key", &Element::key)
        .attribute("ref", &Element::ref);

    factory.element<Slot>("slot");
    return res;
  }
}

#endif