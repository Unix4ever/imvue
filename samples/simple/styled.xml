<style>
  @font-face {
    font-family: "DroidSans";
    src: local("../../../imgui/misc/fonts/DroidSans.ttf");
  }

  @font-face {
    font-family: "Roboto";
    src: local("../../../imgui/misc/fonts/Roboto-Medium.ttf") format(opentype);
  }

  @font-face {
    font-family: "Times New Roman";
    src: local("../../../samples/fonts/times new roman.ttf") format(opentype);
  }

  @font-face {
    font-family: "MaterialIcons";
    src: local("../../../samples/fonts/MaterialIcons-Regular.ttf");
    unicode-range: U+E000-EB60;
  }

  template {
    font-family: DroidSans;
    padding: 5px;
  }

  span {
    margin-right: 0.2rem;
  }

  div:not(:last-of-type) {
    margin-bottom: 0.5rem;
  }

  .icon {
    font-family: MaterialIcons;
    display: inline-block;
  }

  #alt {
    color: #FFCC00;
    font-family: Times New Roman;
  }

  window {
    padding: 5px;
    font-size: 20px;
  }

  .btn {
    padding: 0.2rem 0.5rem;
    display: inline-block;
    background-color: #327ba8;
    color: #FFFFFF;
    border-radius: 5px;
    border: 1px solid rgba(0, 0, 0, 0);
    margin-right: 0.2rem;
  }

  .btn:hover {
    background-color: rgba(60, 146, 199, 1.0);
    border: 1px solid #FFFFFF;
  }

  .btn:active {
    background-color: rgba(60, 146, 199, 0.9);
    border: 1px solid #FFFFFF;
  }

  .icon-btn .icon {
    display: none;
  }

  .icon-btn .icon.normal {
    display: inline-block;
    }

  .icon-btn:hover .icon {
    display: none;
  }

  .icon-btn:hover .icon.over {
    display: inline-block;
  }

  .icon-btn:active .icon {
    display: none;
  }

  .icon-btn:active .icon.active {
    display: inline-block;
  }

  .heart {
    padding-top: 2px;
    display: inline-block;
    margin-right: 0.2rem;
  }

  .heart:hover {
    color: #52b7ff;
  }

  .heart:active {
    color: #52b7ff;
  }

  .selector .btn {
    font-size: 20px;
    margin: 0 1px 0 0;
    padding-left: 0.6em;
    padding-right: 0.6em;
    border: 0;
    border-radius: 0;
  }

  .selector > .btn:first-child {
    border-radius: 5px 0 0 5px;
  }

  .selector > .btn:last-child {
    margin: 0;
    border-radius: 0 5px 5px 0;
  }

  .separator {
    border-top: 1px solid #000000;
    border-bottom: 1px solid #444444;
    width: 100%;
    height: 0;
  }

  input {
    margin-right: 2px;
    margin-bottom: 2px;
  }

  input[type="text"], input[type="password"], input[type="number"] {
    display: block;
    padding: 0.2em 0.5em;
    margin: 2px 2px 10px 2px;
    border: 1px solid #AAAAAA;
    border-radius: 6px;
    background-color: #222222;
  }

  input[type="text"]:active, input[type="password"]:active, input[type="number"]:active {
    margin-top: 0px;
    margin-left: 0px;
    margin-right: 0px;
    margin-bottom: 8px;
    border: 3px solid rgba(126, 198, 242, 1.0);
    border-radius: 9px;
  }

  input.error {
    margin-top: 0px;
    margin-left: 0px;
    margin-right: 0px;
    margin-bottom: 8px;
    border: 3px solid rgba(255, 0, 0, 1.0);
    border-radius: 9px;
  }

  label {
    display: block;
    margin-left: 2px;
    margin-bottom: 2px;
    font-size: 0.8em;
    color: #AAAAAA;
  }

  input[type="checkbox"] {
    display: inline-block !important;
  }

  input[type="range"] {
    background-color: #222222;
    padding: 5px;
    border-radius: 5px;
  }

  .radio input {
    margin-top: 5px;
    display: block;
  }

  .form {
    border: 1px solid #AAAAAA;
    padding: 6px;
    background-color: #333333;
    border-radius: 5px;
  }
</style>

<template>
  <window name="Styled Elements Demo">
    <html>
      <body>
        <div>Block element (div)</div>
        <span>Inline element (span)</span>
        <span id="alt">Another span that is using Times New Roman font</span>

        <h3>First/last Elements</h3>

        <div>
          <div class="selector" style="background-color: #FFFFFF; padding: 2px; border-radius: 8px; display: inline-block">
            <div class="btn icon"></div>
            <div v-for="key in self.choices" class="btn">{{ key }}</btn>
            <div class="btn icon"></div>
          </div>
        </div>

        <h3>Styled Buttons Demo</h3>
        <div class="btn">BUTTON</div>
        <div class="btn icon-btn">
          <span class="icon normal"></span>
          <span class="icon over"></span>
          <span class="icon active"></span>
        </div>
        <div class="icon heart" v-on:click="self.toggle = not self.toggle">{{if self.toggle then return self.heartActive else return self.heartInactive end}}</div>
        <div class="btn">APPROVED<span class="icon"></span></div>
        <h3>Forms</h3>
        <div class="form">
          <label>Styled input example:</label>
          <input type="text" placeholder="hello there..."/>
          <label>Username:</label>
          <input type="text" :class="self.usernameClasses" placeholder="username" v-model="user"/>
          <label>Password:</label>
          <input type="password" :class="self.passwordClasses" placeholder="password" v-model="password"/>
          <label style="font-size: 0.9em">Other kinds of inputs:</label>
          <input class="btn" type="button" value="submit" v-on:click="self:submit()"/>
          <input class="btn" type="color" placeholder="pick you color" v-model="color"/>
          <input style="margin-right: 0.2rem; margin-top: 0.2rem; display: block" type="checkbox" placeholder="check" v-model="checked"/>
          <label>Radio buttons:</label>
          <div class="radio">
            <input type="radio" placeholder="Easy" value="easy" v-model="mode"/>
            <input type="radio" placeholder="Normal" value="normal" v-model="mode"/>
            <input type="radio" placeholder="Hard" value="hard" v-model="mode"/>
            <input type="radio" placeholder="Nightmare" value="nightmare" v-model="mode"/>
          </div>
          <label>Range input:</label>
          <span>
            <input type="range" style="display: inline-block; width: 50%" min="0" max="20" step="0.1" v-model="slide"/>
          </span>
          <label>Number input:</label>
          <span>
            <input type="number" style="display: inline-block; width: 50%" min="0" max="20" step="0.1" v-model="slide"/>
          </span>
          <label>Checkboxes sharing the same model:</label>
          <input style="margin-right: 0.2rem; margin-top: 0.2rem; display: block" type="checkbox" value="first checkbox" v-model="arr"/>
          <input style="margin-right: 0.2rem; margin-top: 0.2rem; display: block" type="checkbox" value="second checkbox" v-model="arr"/>
          <input style="margin-right: 0.2rem; margin-top: 0.2rem; display: block" type="checkbox" value="third checkbox" v-model="arr"/>

          <label>Choices:</label>
          <span style="display: inline-block; padding: 5px; background-color: #FFCC00; color: black; border-radius: 5px" v-for="c in self.arr">{{c}}</span>
          <span v-if="#self.arr == 0">No choices yet</span>
        </div>
        <span class="icon" v-if="self.checked" style="position: absolute; right: 0px; bottom: 0px; color: #000000; background-color: #FFCC00; display: inline; padding: 0.3em; border-radius: 0.2em"></span>
      </body>
    </html>
  </window>
  <custom-window name="Custom Window Example" collapsible="true" closable="true">
    <label>This input has custom style</label>
    <input type="text" class="test"/>
    <div class="btn">custom</div>
    <div class="btn">looking</div>
    <div class="btn">buttons</div>
  </custom-window>

</template>

<script>
  local CustomWindow = require "components.window"

  return ImVue.new({
    components = {
      ['custom-window'] = CustomWindow
    },
    data = function()
      return {
        toggle = false,
        heartActive = '',
        heartInactive = '',
        choices = {
          '1',
          '2',
          '3'
        },
        user = '',
        password = '',
        usernameClasses = {},
        passwordClasses = {},
        color = 0xFF444444,
        slide = 10,
        mode = "easy",
        checked = false,
        arr = {}
      }
    end,
    submit = function(self)
      if self.user == '' then
        self.usernameClasses[1] = 'error'
      else
        self.usernameClasses = {}
      end
      if self.password == '' then
        self.passwordClasses[1] = 'error'
      else
        self.passwordClasses = {}
      end
    end
  })
</script>
