// this file is automatically generated by ImVue tools

{%- macro render_func(element, id) -%}{{element.functions[id].name}}({{ element.functions[id].params|map(attribute='param_name')|join(', ')}}){%- endmacro %}
{%- macro ensure_read(element, field, readFunc) %}
{%- if field.required | d(False) -%}
    if(!{{readFunc}}) {
      throw ElementError("Failed to create element {{element.cls}}: {{readFunc | replace('\"', '\\\"') }} failed");
    }
{%- else -%}
    {{readFunc}};
{%- endif %}
{%- endmacro %}

#ifndef __IMVUE_CONFIG_H__
#define __IMVUE_CONFIG_H__

#include "imgui.h"
#include "imvue.h"
#include "imvue_element.h"
#include "imvue_errors.h"

namespace ImVue {

{%- for element in elements %}

  {%- if element.is_container %}
  {%- set base_class = "ContainerElement" %}
  {%- else %}
  {%- set base_class = "Element" %}
  {%- endif %}

  class {{ element.cls }} : public {{ base_class }} {

    public:
      {{ element.cls }}()
{%- if element.initializers %}
        : {{ element.initializers | join(',') }}
{%- endif %}
      {
{%- if element.init_buffers %}
{%- for init_buffer in element.init_buffers %}
        {{ init_buffer.field_name }} = ({{ init_buffer.field_type }})ImGui::MemAlloc({{ init_buffer.buf_size }});
        {{ init_buffer.field_name }}[0] = '\0';
{%- endfor %}
{%- endif %}
      }

{%- if element.destructors %}
      virtual ~{{ element.cls }}() {
{%- for destructor in element.destructors %}
        {{ destructor }};
{%- endfor %}
      }
{%- endif %}

      void renderBody() {
{%- if element.is_container|d(False) %}
{%- if element.functions.begin.return_type == 'bool' and element.tag not in ['window', 'child'] %}
        if(ImGui::{{ render_func(element, 'begin')}}) {
          {{ base_class }}::renderBody();
          ImGui::{{ render_func(element, 'end') }};
        }
{%- else %}
        ImGui::{{ render_func(element, 'begin') }};
        {{ base_class }}::renderBody();
        ImGui::{{ render_func(element, 'end') }};
{%- endif %}
{%- else %}
        ImGui::{{ render_func(element, 'func') }};
{%- endif %}
      }
{%- if element.fields %}
{%- for field in element.fields %}
      {{ field.field_type | replace('const', '') | trim }} {{ field.field_name }};
{%- endfor %}
{%- endif %}
  };
{%- endfor %}

  // manually defined classes
  class CollapsingHeader : public ContainerElement {

    public:
      CollapsingHeader()
        : label(NULL),flags(0)
      {
      }
      virtual ~CollapsingHeader() {
        if(label != NULL) ImGui::MemFree(label);
      }

      void renderBody() {
        if(ImGui::CollapsingHeader(label, flags))
          ContainerElement::renderBody();
      }
      char* label;
      ImGuiTreeNodeFlags flags;
  };

  // fills in all default elements to the element element factory
  static ElementFactory* createElementFactory()
  {
    ElementFactory* res = new ElementFactory();
    ElementFactory& factory = *res;

{%- for element in elements %}
    factory.element<{{element.cls}}>("{{ element.tag }}")
{%- for field in element.fields %}
      .{{ 'attribute("' + field.attr_name + '", ' if field.param_read != element.from_text | d(None) else 'text(' }}&{{ element.cls }}::{{ field.param_read }}{{ ', true' if field.required else '' }})
{%- endfor %};
{% endfor %}

    factory.element<CollapsingHeader>("collapsing-header")
      .attribute("label", &CollapsingHeader::label)
      .attribute("flags", &CollapsingHeader::flags);

      // register some built-in element types
    factory.element<Document>("template");
    factory.element<Element>("__element__")
        .handler<MouseEventHandler>("click")
        .handler<MouseEventHandler>("mousedown")
        .handler<MouseEventHandler>("mouseup")
        .handler<MouseEventHandler>("mouseover")
        .handler<MouseEventHandler>("mouseout")
        .handler<ChangeEventHandler>("change")
        .handler<KeyboardEventHandler>("keydown")
        .handler<KeyboardEventHandler>("keyup")
        .handler<KeyboardEventHandler>("keypress")
        .attribute("id", &Element::id)
        .attribute("key", &Element::key)
        .attribute("ref", &Element::ref);

    factory.element<Slot>("slot");
    return res;
  }
}

#endif
